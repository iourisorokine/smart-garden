{"version":3,"sources":["modules/Vegetables/types.ts","modules/Vegetables/VegListItem.tsx","modules/Vegetables/AddNewVegButton.tsx","ui/Content.tsx","modules/Vegetables/VegDetails.tsx","modules/Vegetables/AddNewVegetable/KeyDate.tsx","modules/Vegetables/AddNewVegetable/AddNewVegForm.tsx","modules/Vegetables/index.tsx","modules/Garden/index.tsx","modules/Home/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["EventName","vegListStyle","height","width","margin","padding","border","borderRadius","display","flexDirection","alignItems","justifyContent","VegListItem","vegName","vegEmoji","setSelectedVeg","style","onClick","textAlign","AddNewVegButton","createNewVegHandler","Content","styled","div","props","paddingTop","paddingBottom","paddingLeft","paddingRight","VegDetails","selectedVeg","eventNameTranslation","PLANT","SEED","CLEAR","PRUNE","HARVEST","indexToMonth","0","1","2","3","4","5","6","7","8","9","10","11","KeyDateDisplay","date","deleteKeyDate","keyDateStyle","eventName","fontSize","earliest","latest","monthsArray","Object","values","getMonthsIntervalDescription","description","calculationMethod","event","toEvent","differenceInDays","getDifferenceToDateDescription","Button","minWidth","AddNewVegForm","setIsCreateVegView","useState","setVegName","setVegEmoji","spacingBetweenPlants","setSpacingBetweenPlants","spacingBetweenLines","setSpacingBetweenLines","necessarySpacePerPlant","setNecessarySpacePerPlant","minHarvest","setMinHarvest","maxHarvest","setMaxHarvest","wateringFrequency","setWateringFrequency","keyDates","setKeyDates","isAddKeyDateView","setIsAddKeyDateView","newKeyDateEventType","setNewKeyDateEventType","newEventDescription","setNewEventDescription","earliestDateMonth","setEarliestDateMonth","latestDateMonth","setLatestDateMonth","numberDaysLater","setNumberDaysLater","referenceEventForKeyDate","setReferenceEventForKeyDate","useEffect","calculatedSpacePerPlant","Number","toFixed","addKeyDate","newKeyDate","updatedKeyDates","concat","createVegDoc","a","axios","post","name","emoji","spacing","betweenPlantsM","betweenLinesM","necessarySpaceSqm","harvest","minKilos","maxKilos","wateringFrequencyDays","AddKeyDateButton","variant","AddKeyDateForm","FormControl","InputLabel","id","htmlFor","Select","onChange","e","target","value","map","Input","aria-describedby","month","index","type","newDates","splice","Vegetables","isCreateVegView","vegetablesToDisplay","setVegetablesToDisplay","get","data","console","log","loadVeges","createNewVeg","vegetablesList","item","Garden","wrapperStyle","maxWidth","headerStyle","views","Home","view","setView","flex","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d458dff1.chunk.js","sourcesContent":["export enum EventName {\n  PLANT = \"PLANT\",\n  SEED = \"SEED\",\n  CLEAR = \"CLEAR\",\n  PRUNE = \"PRUNE\",\n  HARVEST = \"HARVEST\",\n}\n\nexport const eventNameTranslation = {\n  [EventName.PLANT]: \"Plantage des graines\",\n  [EventName.SEED]: \"Semis en pleine terre\",\n  [EventName.CLEAR]: \"Eclaircissement\",\n  [EventName.PRUNE]: \"Elaguage\",\n  [EventName.HARVEST]: \"Recolte\",\n};\n\nexport const indexToMonth = {\n  0: \"Janvier\",\n  1: \"Fevrier\",\n  2: \"Mars\",\n  3: \"Avril\",\n  4: \"Mai\",\n  5: \"Juin\",\n  6: \"Juillet\",\n  7: \"Aout\",\n  8: \"Septembre\",\n  9: \"Octobre\",\n  10: \"Novembre\",\n  11: \"Decembre\",\n};\n\nexport interface KeyDate {\n  eventName: EventName;\n  description: string;\n  earliest: number;\n  latest: number;\n  calculationMethod?: {\n    differenceInDays: number;\n    toEvent: EventName;\n  };\n}\n\nexport const exampleKeyDate = {\n  eventName: EventName.PLANT,\n  description:\n    \"Planter les graines dans un pot et laisser germer par 25 degres\",\n  earliest: 3,\n  latest: 3,\n};\n\nexport const exampleKeyDate2 = {\n  eventName: EventName.SEED,\n  description: \"Mettre en terre\",\n  earliest: 4,\n  latest: 4,\n  calculationMethod: {\n    differenceInDays: 30,\n    toEvent: EventName.PLANT,\n  },\n};\n","import React, { CSSProperties, SetStateAction, Dispatch } from \"react\";\n\nconst vegListStyle = {\n  height: 60,\n  width: 80,\n  margin: 10,\n  padding: 10,\n  border: \"solid 2px #7a7\",\n  borderRadius: 8,\n  display: \"flex\",\n  flexDirection: \"column\" as CSSProperties[\"flexDirection\"],\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\ninterface VegListItemProps {\n  vegName: string;\n  vegEmoji?: string;\n  setSelectedVeg: Dispatch<SetStateAction<string | null>>;\n}\n\nexport const VegListItem: React.FC<VegListItemProps> = ({\n  vegName,\n  vegEmoji,\n  setSelectedVeg,\n}) => {\n  const onClickHandler = () => {\n    setSelectedVeg(vegName);\n  };\n  return (\n    <div style={vegListStyle} onClick={onClickHandler}>\n      {<h1 style={{ padding: 0, margin: 0 }}>{vegEmoji || \"🍅\"}</h1>}\n      {!!vegName && (\n        <p style={{ padding: 0, margin: 0, textAlign: \"center\" }}>{vegName}</p>\n      )}\n    </div>\n  );\n};\n","import React, { SetStateAction, Dispatch } from \"react\";\n\nconst vegListStyle = {\n  height: 60,\n  width: 80,\n  margin: 10,\n  padding: 10,\n  border: \"solid 2px #7a7\",\n  borderRadius: 8,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\ninterface AddNewVegButtonProps {\n  createNewVegHandler: () => void;\n}\n\nexport const AddNewVegButton: React.FC<AddNewVegButtonProps> = ({\n  createNewVegHandler,\n}) => {\n  const onClickHandler = () => {\n    createNewVegHandler();\n  };\n  return (\n    <div style={vegListStyle} onClick={onClickHandler}>\n      <h2>+ Add</h2>\n    </div>\n  );\n};\n","import styled from \"styled-components\";\n\nexport interface ContentProps {\n  padding?: number;\n  paddingTop?: number;\n  paddingBottom?: number;\n  paddingLeft?: number;\n  paddingRight?: number;\n  flexDirection?: \"row\" | \"column\";\n  alignItems?: \"center\" | \"flex-start\" | \"flex-end\";\n  justifyContent?: \"center\" | \"space-around\" | \"space-between\" | \"space-evenly\";\n}\n\nexport const Content = styled.div`\n  padding: ${(props: ContentProps) => props.padding ?? 0};\n  padding-top: ${(props: ContentProps) =>\n    props.paddingTop ?? props.padding ?? 0};\n  padding-bottom: ${(props: ContentProps) =>\n    props.paddingBottom ?? props.padding ?? 0};\n  padding-left: ${(props: ContentProps) =>\n    props.paddingLeft ?? props.padding ?? 0};\n  padding-right: ${(props: ContentProps) =>\n    props.paddingRight ?? props.padding ?? 0};\n  display: flex;\n  flex: 1;\n  width: calc(100%-padding-border);\n  flex-direction: ${(props: ContentProps) => props.flexDirection ?? \"column\"};\n  align-items: ${(props: ContentProps) => props.alignItems ?? \"flex-start\"};\n  justify-content: ${(props: ContentProps) => props.justifyContent ?? \"center\"};\n`;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { Content } from \"../../ui\";\n\nexport interface VegDetailProps {\n  selectedVeg: string;\n  setSelectedVeg: Dispatch<SetStateAction<string | null>>;\n}\n\nexport const VegDetails: React.FC<VegDetailProps> = ({\n  selectedVeg,\n  setSelectedVeg,\n}) => {\n  return (\n    <div>\n      <Content flexDirection=\"row\" justifyContent=\"space-between\">\n        <h3>Fiche {selectedVeg} detaillee</h3>\n        <div onClick={() => setSelectedVeg(null)}>\n          <h3>x</h3>\n        </div>\n      </Content>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport {\n  eventNameTranslation,\n  indexToMonth,\n  KeyDate,\n} from \"../types\";\n\nexport interface KeyDateDisplayProps {\n  date: KeyDate;\n  deleteKeyDate: () => void;\n}\n\nexport const KeyDateDisplay: React.FC<KeyDateDisplayProps> = ({ date, deleteKeyDate }) => {\n  const getMonthsIntervalDescription = (earliest: number, latest: number) => {\n    const monthsArray = Object.values(indexToMonth);\n    if (earliest === latest) {\n      return `en ${monthsArray[earliest]}`;\n    } else if (earliest < latest) {\n      return `Entre ${monthsArray[earliest]} et ${monthsArray[latest]}`;\n    }\n    return \"periode inconnue\";\n  };\n\n  const getDifferenceToDateDescription = () => {\n    if (date?.calculationMethod) {\n      const event = eventNameTranslation[date.calculationMethod.toEvent];\n      return `${date.calculationMethod.differenceInDays} jours apres le/la ${event}`;\n    }\n  };\n\n  return (\n    <div style={keyDateStyle}>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <div>\n          <div>{eventNameTranslation[date.eventName]}</div>\n          <div\n            style={{\n              fontSize: 12,\n            }}>\n            {getMonthsIntervalDescription(date.earliest, date.latest)}\n          </div>\n          <div\n            style={{\n              fontSize: 12,\n            }}>\n            {date.description}\n          </div>\n\n          <div\n            style={{\n              fontSize: 12,\n            }}>\n            {date.calculationMethod ? getDifferenceToDateDescription() : null}\n          </div>\n        </div>\n        <Button style={{ height: 32, minWidth: 32 }} onClick={deleteKeyDate}>\n          x\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst keyDateStyle = {\n  margin: \"6px 0 6px 0\",\n  padding: 12,\n  border: \"solid 1px #666\",\n  borderRadius: 4,\n};\n","import React, { useState, useEffect, SetStateAction } from \"react\";\nimport { Content } from \"../../../ui\";\nimport axios from \"axios\";\nimport {\n  FormControl,\n  InputLabel,\n  Input,\n  Button,\n  Select,\n} from \"@material-ui/core\";\nimport {\n  EventName,\n  eventNameTranslation,\n  indexToMonth,\n  KeyDate,\n} from \"../types\";\nimport { KeyDateDisplay } from \"./KeyDate\";\n\nexport interface AddNewVegFormProps {\n  setIsCreateVegView: (v: React.SetStateAction<boolean>) => void;\n}\n\nexport const AddNewVegForm: React.FC<AddNewVegFormProps> = ({\n  setIsCreateVegView,\n}) => {\n  const [vegName, setVegName] = useState<string>(\"\");\n  const [vegEmoji, setVegEmoji] = useState<string>(\"\");\n  const [spacingBetweenPlants, setSpacingBetweenPlants] = useState(\"0\");\n  const [spacingBetweenLines, setSpacingBetweenLines] = useState(\"0\");\n  const [necessarySpacePerPlant, setNecessarySpacePerPlant] = useState(\"0\");\n  const [minHarvest, setMinHarvest] = useState(\"0\");\n  const [maxHarvest, setMaxHarvest] = useState(\"0\");\n  const [wateringFrequency, setWateringFrequency] = useState(\"0\");\n  const [keyDates, setKeyDates] = useState<KeyDate[]>([]);\n  const [isAddKeyDateView, setIsAddKeyDateView] = useState<boolean>(false);\n\n  const [newKeyDateEventType, setNewKeyDateEventType] = useState<EventName>(\n    EventName.SEED\n  );\n  const [newEventDescription, setNewEventDescription] = useState<string>(\"\");\n  const [earliestDateMonth, setEarliestDateMonth] = useState(0);\n  const [latestDateMonth, setLatestDateMonth] = useState(0);\n  const [numberDaysLater, setNumberDaysLater] = useState(0);\n  const [referenceEventForKeyDate, setReferenceEventForKeyDate] = useState(\n    EventName.SEED\n  );\n\n  useEffect(() => {\n    const calculatedSpacePerPlant = (\n      Number(spacingBetweenPlants) * Number(spacingBetweenLines)\n    ).toFixed(2);\n    setNecessarySpacePerPlant(calculatedSpacePerPlant);\n  }, [spacingBetweenPlants, spacingBetweenLines]);\n\n  const handleSpacingBetweenLines = (e: any) => {\n    if (e) {\n      setSpacingBetweenLines(e.target.value);\n    }\n  };\n\n  const handleSpacingBetweenPlants = (e: any) => {\n    if (e) {\n      setSpacingBetweenPlants(e.target.value);\n    }\n  };\n\n  const addKeyDate = () => {\n    const newKeyDate = {\n      eventName: newKeyDateEventType,\n      description: newEventDescription,\n      earliest: earliestDateMonth,\n      latest: latestDateMonth,\n      calculationMethod: {\n        differenceInDays: numberDaysLater,\n        toEvent: referenceEventForKeyDate,\n      },\n    };\n    const updatedKeyDates = keyDates.concat([newKeyDate]);\n    setKeyDates(updatedKeyDates);\n    setIsAddKeyDateView(false);\n    return;\n  };\n\n  const deleteKeyDate = (index: number) => {\n    const newDates = keyDates;\n    newDates.splice(index, 1);\n    setKeyDates([...newDates]);\n  };\n\n  const createVegDoc = async () => {\n    await axios.post(\"api/vegetable\", {\n      name: vegName,\n      emoji: vegEmoji,\n      spacing: {\n        betweenPlantsM: Number(spacingBetweenPlants),\n        betweenLinesM: Number(spacingBetweenLines),\n        necessarySpaceSqm: Number(necessarySpacePerPlant),\n      },\n      harvest: {\n        minKilos: Number(minHarvest),\n        maxKilos: Number(maxHarvest),\n      },\n      wateringFrequencyDays: Number(wateringFrequency),\n      keyDates,\n    });\n    setIsCreateVegView(false);\n  };\n\n  const AddKeyDateButton: React.FC = () => (\n    <Button variant=\"outlined\" onClick={() => setIsAddKeyDateView(true)}>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <div>{\"+ Ajouter une date clé\"}</div>\n      </div>\n    </Button>\n  );\n\n  const AddKeyDateForm: React.FC = () => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          margin: 12,\n          padding: 12,\n          border: \"1px black solid\",\n          borderRadius: 4,\n        }}>\n        <h4>Nouvelle date clé:</h4>\n        <FormControl>\n          <InputLabel id=\"helper10\" htmlFor=\"my-input10\">\n            Type:\n          </InputLabel>\n          <Select\n            onChange={(e) =>\n              setNewKeyDateEventType(\n                e.target.value as SetStateAction<EventName>\n              )\n            }\n            value={newKeyDateEventType}>\n            {[\n              EventName.SEED,\n              EventName.PLANT,\n              EventName.PRUNE,\n              EventName.CLEAR,\n              EventName.HARVEST,\n            ].map((eventName) => {\n              return (\n                <option value={eventName}>\n                  {eventNameTranslation[eventName]}\n                </option>\n              );\n            })}\n          </Select>\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input11\">Description:</InputLabel>\n          <Input\n            id=\"my-input11\"\n            aria-describedby=\"my-helper-text11\"\n            value={newEventDescription}\n            onChange={(e) => setNewEventDescription(e.target.value)}\n          />\n        </FormControl>\n        <FormControl>\n          <InputLabel id=\"helper12\" htmlFor=\"my-input12\">\n            Au plus tôt en:\n          </InputLabel>\n          <Select\n            onChange={(e) => setEarliestDateMonth(Number(e.target.value))}\n            value={earliestDateMonth}>\n            {Object.values(indexToMonth).map((month, index) => {\n              return <option value={index}>{month}</option>;\n            })}\n          </Select>\n        </FormControl>\n        <FormControl>\n          <InputLabel id=\"helper12\" htmlFor=\"my-input12\">\n            Au plus tard en:\n          </InputLabel>\n          <Select\n            onChange={(e) => setLatestDateMonth(Number(e.target.value))}\n            value={latestDateMonth}>\n            {Object.values(indexToMonth).map((month, index) => {\n              return <option value={index}>{month}</option>;\n            })}\n          </Select>\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input13\">\n            {\"(Optionnel) nombre de jours\"}\n          </InputLabel>\n          <Input\n            id=\"my-input13\"\n            aria-describedby=\"my-helper-text13\"\n            type=\"number\"\n            value={numberDaysLater}\n            onChange={(e) => setNumberDaysLater(Number(e.target.value))}\n          />\n        </FormControl>\n        <FormControl>\n          <InputLabel id=\"helper10\" htmlFor=\"my-input10\">\n            apres l'évennement suivant:\n          </InputLabel>\n          <Select\n            onChange={(e) =>\n              setReferenceEventForKeyDate(\n                e.target.value as SetStateAction<EventName>\n              )\n            }\n            value={referenceEventForKeyDate}>\n            {[\n              EventName.SEED,\n              EventName.PLANT,\n              EventName.PRUNE,\n              EventName.CLEAR,\n              EventName.HARVEST,\n            ].map((eventName) => {\n              return (\n                <option value={eventName}>\n                  {eventNameTranslation[eventName]}\n                </option>\n              );\n            })}\n          </Select>\n        </FormControl>\n        <div style={{ display: \"flex\", justifyContent: \"center\", padding: 12 }}>\n          <Button variant=\"outlined\" onClick={addKeyDate}>\n            Ajouter\n          </Button>\n          <Button variant=\"outlined\" onClick={() => setIsAddKeyDateView(false)}>\n            Annuler\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          padding: 24,\n        }}>\n        <h3>Créer une fiche Legume</h3>\n        <Button\n          variant=\"outlined\"\n          onClick={() => setIsCreateVegView(false)}\n          style={{ margin: 12 }}>\n          fermer\n        </Button>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          width: 500,\n          margin: \"auto\",\n        }}>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input\">Denomination du legume</InputLabel>\n          <Input\n            id=\"my-input\"\n            aria-describedby=\"my-helper-text\"\n            value={vegName}\n            onChange={(e) => setVegName(e.target.value)}\n          />\n        </FormControl>\n        <FormControl>\n          <InputLabel id=\"helper2\" htmlFor=\"my-input2\">\n            Emoji\n          </InputLabel>\n          <Select\n            value={vegEmoji}\n            onChange={(e) =>\n              setVegEmoji((e.target.value as unknown) as string)\n            }>\n            {[\"\", \"🌶\", \"🌽\", \"🍅\", \"🥕\", \"🍆\"].map((emoji) => {\n              return <option value={emoji}>{emoji}</option>;\n            })}\n          </Select>\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input3\">\n            Espace entre les plants (m)\n          </InputLabel>\n          <Input\n            id=\"my-input3\"\n            aria-describedby=\"my-helper-text3\"\n            type=\"number\"\n            value={spacingBetweenPlants}\n            onChange={handleSpacingBetweenPlants}\n          />\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input4\">\n            Espace entre les lignes (m)\n          </InputLabel>\n          <Input\n            id=\"my-input4\"\n            aria-describedby=\"my-helper-text4\"\n            type=\"number\"\n            value={spacingBetweenLines}\n            onChange={handleSpacingBetweenLines}\n          />\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input5\">\n            Espace par plant necessaire (m2)\n          </InputLabel>\n          <Input\n            id=\"my-input5\"\n            aria-describedby=\"my-helper-text5\"\n            type=\"number\"\n            value={necessarySpacePerPlant}\n            onChange={(e) => setNecessarySpacePerPlant(e.target.value)}\n          />\n        </FormControl>\n        <Content flexDirection=\"row\">\n          <h4>Recolte par plant (kg)</h4>\n          <div style={{ paddingLeft: 16, paddingRight: 16 }}>\n            <FormControl>\n              <InputLabel htmlFor=\"my-input8\">Min</InputLabel>\n              <Input\n                id=\"my-input8\"\n                aria-describedby=\"my-helper-text8\"\n                type=\"number\"\n                value={minHarvest}\n                onChange={(e) => setMinHarvest(e.target.value)}\n              />\n            </FormControl>\n          </div>\n          <FormControl>\n            <InputLabel htmlFor=\"my-input9\">Max</InputLabel>\n            <Input\n              id=\"my-input9\"\n              aria-describedby=\"my-helper-text9\"\n              type=\"number\"\n              value={maxHarvest}\n              onChange={(e) => setMaxHarvest(e.target.value)}\n            />\n          </FormControl>\n        </Content>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input10\">\n            Arroser tous les ... jours\n          </InputLabel>\n          <Input\n            id=\"my-input10\"\n            aria-describedby=\"my-helper-text10\"\n            type=\"number\"\n            value={wateringFrequency}\n            onChange={(e) => setWateringFrequency(e.target.value)}\n          />\n        </FormControl>\n        <h4>Dates clé:</h4>\n        {isAddKeyDateView ? <AddKeyDateForm /> : <AddKeyDateButton />}\n        {keyDates.map((date, index) => (\n          <KeyDateDisplay\n            key={index}\n            date={date}\n            deleteKeyDate={() => deleteKeyDate(index)}\n          />\n        ))}\n        <div style={{ padding: 24, margin: \"auto\" }}>\n          <Button onClick={createVegDoc} variant=\"contained\">\n            Creer\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { VegListItem } from \"./VegListItem\";\nimport { AddNewVegButton } from \"./AddNewVegButton\";\nimport { VegDetails } from \"./VegDetails\";\nimport { AddNewVegForm } from \"./AddNewVegetable/AddNewVegForm\";\n\nconst vegListStyle = {\n  padding: 20,\n  display: \"flex\",\n};\n\nexport const Vegetables: React.FC = () => {\n  const [selectedVeg, setSelectedVeg] = useState<string | null>(null);\n  const [isCreateVegView, setIsCreateVegView] = useState<boolean>(false);\n  const [vegetablesToDisplay, setVegetablesToDisplay] = useState<any[]>([\"\"]);\n\n  useEffect(() => {\n    const loadVeges = async () => {\n      try {\n        const { data } = await axios.get(\"/api/vegetable\");\n        if (data) {\n          setVegetablesToDisplay([\"\", ...data]);\n        }\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    loadVeges();\n  }, [isCreateVegView]);\n\n  const createNewVeg = () => setIsCreateVegView(true);\n  const vegetablesList = vegetablesToDisplay.map((item, index) => {\n    if (index === 0)\n      return <AddNewVegButton createNewVegHandler={createNewVeg} />;\n    return <VegListItem vegName={item.name} setSelectedVeg={setSelectedVeg} />;\n  });\n  return (\n    <div>\n      {isCreateVegView ? (\n        <AddNewVegForm setIsCreateVegView={setIsCreateVegView} />\n      ) : !selectedVeg ? (\n        <div style={vegListStyle}>{vegetablesList}</div>\n      ) : (\n        <VegDetails selectedVeg={selectedVeg} setSelectedVeg={setSelectedVeg} />\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Garden: React.FC = () => {\n  return (\n    <div\n      style={{\n        padding: 20,\n        display: \"flex\",\n      }}>\n      <h2>Vue du jardin ici</h2>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Vegetables } from \"../Vegetables\";\nimport { Garden } from \"../Garden\";\nimport { Button } from \"@material-ui/core\";\n\nconst wrapperStyle = {\n  maxWidth: 900,\n  margin: \"auto\",\n  display: \"flex\",\n  flexDirection: \"column\" as \"column\",\n  border: \"solid 1px #aaa\",\n};\n\nconst headerStyle = {\n  padding: 20,\n};\n\nconst views = {\n  VEGES: \"VEGES\",\n  GARDEN: \"GARDEN\",\n};\n\nexport const Home: React.FC = () => {\n  const [view, setView] = useState(views.VEGES);\n  return (\n    <div style={wrapperStyle}>\n      <div style={headerStyle}>\n        <h1>Welcome to Smart Garden</h1>\n      </div>\n      <div style={{ display: \"flex\", flex: 1, padding: 10 }}>\n        <div style={{ padding: 10 }}>\n          <Button\n            color={view === views.VEGES ? \"primary\" : \"default\"}\n            variant=\"outlined\"\n            onClick={() => setView(views.VEGES)}>\n            <h3>Legumes</h3>\n          </Button>\n        </div>\n        <div style={{ padding: 10 }}>\n          <Button\n            color={view === views.GARDEN ? \"primary\" : \"default\"}\n            variant=\"outlined\"\n            onClick={() => setView(views.GARDEN)}>\n            <h3>Jardin</h3>\n          </Button>\n        </div>\n      </div>\n      {view === views.VEGES && <Vegetables />}\n      {view === views.GARDEN && <Garden />}\n    </div>\n  );\n};\n","import { Home } from \"./modules/Home\";\n\nconst App = () => {\n  return <Home />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}